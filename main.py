from api.fetch import (
    createPlaylist,
    addPlaylistItem,
    fetchPlaylists,
    checkDescription,
    checkBannedCountries,
    checkPlaylistCount,
)
from api.authenticate import validateOAuth2
from collector.search import Collector
from collector.gather import parseVG
from utils.time import getTitle, getDescription, getTime
import schedule
import time
import re
from googleapiclient.errors import HttpError

def initAuth():
    youtube = validateOAuth2()

    # check if playlist already exists

    # try:
    #     if fetchPlaylists(youtube)["items"][0]["snippet"]["title"] == getTitle():
    #         print("Playlist already exists! Exiting...")
    #         exit(0)

    # except IndexError:
    #     print("No playlists found, skipping...")

    # fetch youtubeIDs
    collector = Collector()
    return youtube, collector

def job(youtube, collector, mode):
    
    ids = collector.Fetch(mode)
    banned_countries = []

    print("Check for invalid videos...")
    # check banned countries
    for id in ids:

        banned = checkBannedCountries(youtube, id=id)
        if banned:
            banned_countries.append([id, ", ".join(banned)])

        if re.search(".*Auto-generated by YouTube..*", checkDescription(youtube, id=id)):
            print("Found duplicate (type: Auto-generated audio).")

    # ratelimiting: 10k/day, usage:50-150/mo [POST]
    print("Creating playlist . . .")
    playlist = createPlaylist(
        youtube, getTitle(mode), getDescription(collector.get_unavailable_videos(), banned_countries)
    )
    time.sleep(2)

    # add items based on IDs (need response from playlist)
    print("Adding playlist items . . .")

    for i, id in enumerate(ids):

        timeout = False
        while not timeout:

            # wait until playlist updates
            print(checkPlaylistCount(youtube, playlist["id"]))
            if checkPlaylistCount(youtube, playlist["id"]) != i:
                print("Playlist has not been updated. Sleeping for 5 sec.")
                time.sleep(5)
                continue

            print(f"Adding {id}...")
            try:
                response = addPlaylistItem(youtube, playlist["id"], id)
                timeout = True

            except HttpError as err:
                # If the error is a rate limit or connection error,
                # wait and try again.
                print("? ", err.code)

                if err.resp.status in [404]:
                    print("Playlist doesn't exist.")
                    print(f"An HTTP error {err.code} occurred:{err.reason}")
                    print("Sleeping for 5 seconds...")
                    time.sleep(5)

                elif err.resp.status in [403, 500, 503]:
                    print(f"An HTTP error {err.code} occurred:{err.reason}")
                    print("Sleeping for 5 seconds...")
                    time.sleep(5)
                else:
                    raise

        time.sleep(2)

    print("Successfully created playlist!", response["id"])


def main():
    youtube, collector = initAuth()
    job(youtube, collector, 0)
    job(youtube, collector, 1)
    # schedule.every(2).weeks.do(job)

    # while True:
    #     schedule.run_pending()
    #     time.sleep(1)


if __name__ == "__main__":
    main()
